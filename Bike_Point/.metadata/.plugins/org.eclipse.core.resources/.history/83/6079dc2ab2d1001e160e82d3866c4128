package com.bikepoint.jwtsequrity;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

	@Autowired
	private UserDetailsService userDetailsService;

	@Autowired
	private JwtTokenHelper jwtTokenHelper;
	

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {

		// 1-Get Token
		String requestToken = request.getHeader("Authorization");

		// Bearer 1qafds1

		String token = null;
		String email = null;
		if (request != null && requestToken.startsWith("Bearer ")) {
			token = requestToken.substring(7);

			try {
				email = jwtTokenHelper.extractEmail(token);
			} catch (IllegalArgumentException e) {
				System.out.println("Unable to get Jwt Token");
			} catch (ExpiredJwtException e) {
				System.out.println("Jwt Token has Expired");
			} catch (MalformedJwtException e) {
				System.out.println("Invalid Jwt!");
			}

			if (email != null && SecurityContextHolder.getContext().getAuthentication() == null) { 
	            UserDetails userDetails = userDetailsService.loadUserByUsername(email); 
	            if (jwtTokenHelper.validateToken(token, userDetails)) {
	            	
	                UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities()); 
	                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request)); 
	                SecurityContextHolder.getContext().setAuthentication(authToken); 
	            } 
	        } 
	        filterChain.doFilter(request, response); 

		}

	}

}
